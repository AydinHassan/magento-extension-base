# {{NAME}}

{{DESCRIPTION}}

## Installation

This module is installable via `Composer`. If you have used the Magento Skeleton as a base module then you can just
require this project and all the rest is done for you.

Note: As these repositories are currently private and not available via a public package list like [Packagist](https://packagist.org/)
Or [Firegento](http://packages.firegento.com) you need to add the repository to the projects `composer.json`
before you require the project.

```
"repositories": [
    {
        "type": "vcs",
        "url": "{{REPO}}"
    }
],
```

```
$ composer require "{{PACKAGENAME}}"
```

## Running Tests

```
$ cd vendor/{{PACKAGENAME}}
$ composer install
$ vendor/bin/phpunit

```

## Writing Tests

If you've tried to test Magento you have probably run into the issue of static calls to `Mage` not being testable and
forcing you to refactor your code to create tests.

To combat this we are making use of [Aspect Mock](https://github.com/Codeception/AspectMock) which uses
[Go! AOP](https://github.com/lisachenko/go-aop-php) to be able to create test doubles for static method calls.
The great thing about this is that we don't have to use any PEAR or PECL extension as everything is pulled in by composer.

### Example Test with AspectMock

```php
public function testModelCall()
{
    // This test demonstrates how to create a test double for Mage
    // Normally you would be testing a separate classes method so
    // some of the logic below would be in a separate file, obvs.

    // Using PhpUnits mock builder we can create a stub object for
    // a Magento core file. Which allows us to control what the
    // method calls return and also assert they are invoked, etc.
    $mockModel = $this->getMockBuilder('Mage_Catalog_Model_Product')
        ->setMethods(array('getSku'))
        ->getMock();

    $mockModel
        ->expects($this->once())
        ->method('getSku')
        ->will($this->returnValue('123456789'));

    // Because getting a model in Magento consists of a static call
    // it makes testing difficult. To counter this we are using a
    // library called AspectMock which uses Go! AOP to allow us to
    // create test doubles for static method calls. WIN!
    $modelStub = test::double('Mage', ['getModel' => $mockModel]);

    // This is the logic we would be testing
    $model  = Mage::getModel('catalog/product');
    $sku    = $model->getSku();

    // Because our $modelStub returned our $mockModel when Mage::getModel()
    // is called $model is the same as our $mockModel. By calling getSku()
    // we are using the stubbed model method which returns our defined result.
    $this->assertSame('123456789', $sku);

    // We will also want to assert that the stubbed static method was
    // actually called.
    $modelStub->verifyInvokedOnce('getModel', 'catalog/product');
}
```

All PRs should include tests where applicable, there's no excuses now!

----
*__Note:__ All the above commands assume you're in your projects root dir to start with*